@using Hotello.Common
@using Hotello.Services.Expedia.Hotels.Models
@using Hotello.UI.Web.Models
@model SearchViewModel


@{
    ViewBag.Title = "Search";

    IDictionary<string, object> formHtml = new Dictionary<string, object>();
    formHtml.Add("class", "form-horizontal well");

    IDictionary<string, object> controlLabel = new Dictionary<string, object>();
    controlLabel.Add("class", "control-label");

    IDictionary<string, object> dateFieldHtml = new Dictionary<string, object>();
    dateFieldHtml.Add("class", "input-small");

    IDictionary<string, object> adultDropdownHtml = new Dictionary<string, object>();
    adultDropdownHtml.Add("class", "input-mini adult");

    IDictionary<string, object> childDropdownHtml = new Dictionary<string, object>();
    childDropdownHtml.Add("class", "input-mini child");

    IDictionary<string, object> ageDropDownHtml = new Dictionary<string, object>();
    ageDropDownHtml.Add("class", "input-mini age");

    IDictionary<string, object> mutliSelectHtml = new Dictionary<string, object>();
    mutliSelectHtml.Add("multiple", "multiple");
}


<div class="row">
    <div class="span12">
        @using (Html.BeginForm("Index", "Search", FormMethod.Post, formHtml))
        {
            @Html.AntiForgeryToken()
            <fieldset>
                <legend>Search for a Hotel</legend>
                @Html.ValidationSummary(true)
                <!-- ARRIVAL -->
                <div class="control-group">
                    @Html.LabelFor(search => search.CheckinDate, "Check-in Date", controlLabel)
                    <div class="controls">
                        <div class="input-append">
                            @Html.TextBoxFor(search => search.CheckinDate, dateFieldHtml)
                            <span class="add-on">
                                <i class="icon-calendar"></i>
                            </span>
                        </div>
                        @Html.ValidationMessageFor(search => search.CheckinDate)
                    </div>
                </div>
                <!-- DEPARTURE -->
                <div class="control-group">
                    @Html.LabelFor(model => model.CheckoutDate, "Check-out Date", controlLabel)
                    <div class="controls">
                        <div class="input-append">
                            @Html.TextBoxFor(model => model.CheckoutDate, dateFieldHtml)
                            <span class="add-on">
                                <i class="icon-calendar"></i>
                            </span>
                        </div>
                        @Html.ValidationMessageFor(model => model.CheckoutDate)
                    </div>
                </div>
                <!-- DESTINATION STRING -->
                <div class="control-group">
                    @Html.LabelFor(model => model.Destination, "Destination", controlLabel)
                    <div class="controls">
                        @Html.TextBoxFor(model => model.Destination, new { @class = "input-xlarge", placeholder = "City, Province, Country" })
                        @Html.ValidationMessageFor(model => model.Destination)
                        <br />
                        <img src="@Url.Content("~/Content/images/powered-by-google-on-white.png")" title="Powered by Google" alt="Powered by Google" />
                    </div>
                    
                </div>
                <div class="control-group landmarks">
                    @Html.LabelFor(model => model.DestinationId, "Close to", controlLabel)
                    <div class="controls">
                        <select id="destinationId" name="DestinationId" class="input-xlarge">
                            <!-- AJAX POPULATED -->
                        </select>
                    </div>
                </div>
                <!-- CITY -->
                <div class="control-group hide">
                    @Html.LabelFor(model => model.City, "City", controlLabel)
                    <div class="controls">
                        @Html.TextBoxFor(model => model.City, new { @class = "input-medium" })
                        @Html.ValidationMessageFor(model => model.City)
                    </div>
                </div>
                <!-- PROVINCE -->
                <div class="control-group hide">
                    @Html.LabelFor(model => model.Province, controlLabel)
                    <div class="controls">
                        @Html.TextBoxFor(model => model.Province, new { @class = "input-small" })
                        @Html.ValidationMessageFor(model => model.Province)
                    </div>
                </div>
                <!-- COUNTRY -->
                <div class="control-group hide">
                    @Html.LabelFor(model => model.Country, controlLabel)
                    <div class="controls">
                        @Html.DropDownListFor(model => model.Country, new SelectList(new List<string>() { "UK", "US", "DE" }), new { @class = "input-small" })
                        @Html.ValidationMessageFor(model => model.Country)
                    </div>
                </div>
                <!-- STAR RATING -->
                <div class="control-group">
                    @Html.LabelFor(model => model.MinimumStarRating, "Star Rating between", controlLabel)
                    <div class="controls">
                        @Html.TextBoxFor(model => model.MinimumStarRating)
                        @Html.TextBoxFor(model => model.MaximumStarRating)
                        <ul class="inline">
                            <li>
                                <div id="starMinimum" class="star"><!-- Place Holder --></div>
                            </li>
                            <li>
                                <span>and</span>
                            </li>
                            <li>
                                <div id="starMaximum" class="star"><!-- Place Holder --></div>
                            </li>
                        </ul>
                    </div>
                </div>
                <!-- ROOMS REQUIRED -->
                <div class="control-group">
                    @Html.LabelFor(model => model.NumberOfBedrooms, "Rooms", controlLabel)
                    <div class="controls">
                        @Html.DropDownListFor(model => model.NumberOfBedrooms, SearchViewModel.RoomsSelectList, new { @class = "input-mini" })
                        @Html.ValidationMessageFor(model => model.NumberOfBedrooms)
                    </div>
                </div>
                <!-- ROOMS -->
                <div class="control-group">
                    <div class="controls">
                        <ol class="rooms unstyled">
                            @for (int i = 0; i < Model.RoomViewModels.Count; i++)
                            {
                                <!-- ROOM -->
                                <li class="room">
                                    <span>Room<span class="room"></span></span>
                                    <!-- ADULTS -->
                                    <div class="input-prepend">
                                        <span class="add-on">Adults</span>
                                        @Html.DropDownListFor(x => Model.RoomViewModels[i].Adults, SearchViewModel.AdultSelectList, "0", adultDropdownHtml)
                                    </div>
                                    <!-- CHILDREN -->
                                    <div class="input-prepend">
                                        <span class="add-on">Children</span>
                                        @Html.DropDownListFor(x => Model.RoomViewModels[i].Children, SearchViewModel.ChildrenSelectList, "0", childDropdownHtml)
                                    </div>
                                    <!-- AGES -->
                                    @for (int j = 0; j < Model.RoomViewModels[i].AgeViewModels.Count; j++)
                                    {
                                        <!-- AGE -->
                                        <div class="age input-prepend">
                                            <span class="add-on">Age</span>
                                            @Html.DropDownListFor(x => Model.RoomViewModels[i].AgeViewModels[j].Age, SearchViewModel.ChildrenAgesSelectList, "<1", ageDropDownHtml)
                                        </div>
                                    }
                                </li>
                            }
                        </ol>
                    </div>
                </div>
                <!-- AMENITIES -->
                <div class="control-group">
                    <label class="control-label">Amenities</label>
                    <div class="controls">
                        <div class="btn-group">
                            <a href="#amenities" data-toggle="dropdown" class="btn btn-info dropdown-toggle">
                                Amenities<span class="caret"></span>
                            </a>
                            <ul class="dropdown-menu">
                                @foreach (var amenity in Enum.GetValues(typeof(Amenity)).Cast<Amenity>())
                                {
                                    <li>
                                        <label class="checkbox">
                                            <input type="checkbox" id="Amenities_@amenity" value="@((int)amenity)" name="Amenities" />
                                            @amenity.GetDescription()
                                        </label>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
                <!-- PROPERTY CATEGORY -->
                <div class="control-group hide">
                    @Html.LabelFor(model => model.PropertyCategories, "Properties", controlLabel)
                    <div class="controls">
                        @Html.ListBoxFor(model => model.PropertyCategories, Model.CategoriesMultiList, mutliSelectHtml)
                        @Html.ValidationMessageFor(model => model.PropertyCategories)
                        <a class="btn btn-info btn-mini">Clear selected options</a>
                    </div>
                </div>
                <!-- SEARCH OPTION -->
                <div class="control-group hide">
                    @Html.LabelFor(model => model.Option, controlLabel)
                    <div class="controls">
                        @Html.DropDownListFor(model => model.Option, Model.OptionsList)
                        @Html.ValidationMessageFor(model => model.Option)
                    </div>
                </div>
                <!-- RESULTS PER PAGE -->
                <div class="control-group hide">
                    @Html.LabelFor(model => model.ResultsPerPage, "Results Per Page", controlLabel)
                    <div class="controls">
                        @Html.DropDownListFor(model => model.ResultsPerPage, Model.ResultsPerPageList, new { @class = "span2" })
                        @Html.ValidationMessageFor(model => model.ResultsPerPage)
                    </div>
                </div>
                <!-- SUBMIT -->
                <div class="form-actions">
                    <button class="btn btn-primary">
                        <i class="icon-search"></i>Search
                    </button>
                    <input type="submit" class="hidden" value="Submit" />
                </div>
            </fieldset>
        }
    </div>
</div>

@section Scripts {

    <script type="text/javascript">

        $(document).ready(function () {

            //Globalize.culture('en-GB');

            //$.validator.methods.date = function (value, element) {
            //    return this.optional(element) || !isNaN(Globalize.parseDate(value));
            //};
            
            // ----------------------------------------------------------------
            // Form Validation ------------------------------------------------
            // ----------------------------------------------------------------

            // Fix for Bootstrap CSS Error styling with ASP.NET MVC jquery validation
            //$('span.field-validation-valid, span.field-validation-error').each(function () {
            //    $(this).addClass('help-inline');
            //});

            //$('form').submit(function () {
            //    if ($(this).valid()) {
            //        $(this).find('div.control-group').each(function () {
            //            if ($(this).find('span.field-validation-error').length == 0) {
            //                $(this).removeClass('error');
            //            }
            //        });
            //    }
            //    else {
            //        $(this).find('div.control-group').each(function () {
            //            if ($(this).find('span.field-validation-error').length > 0) {
            //                $(this).addClass('error');
            //            }
            //        });
            //    }
            //});


            //$('form').each(function () {
            //    $(this).find('div.control-group').each(function () {
            //        if ($(this).find('span.field-validation-error').length > 0) {
            //            $(this).addClass('error');
            //        }
            //    });
            //});

            //var page = function () {
            //    //Update that validator
            //    $.validator.setDefaults({
            //        highlight: function (element) {
            //            $(element).closest(".control-group").addClass("error");
            //        },
            //        unhighlight: function (element) {
            //            $(element).closest(".control-group").removeClass("error");
            //        }
            //    });
            //}();

            // ----------------------------------------------------------------
            // Form Submit ----------------------------------------------------
            // ----------------------------------------------------------------
            $('div.form-actions button').click(function (e) {
                e.preventDefault();
                $('div.form-actions input[type="submit"]').click();
            });

            // ----------------------------------------------------------------
            // Auto Suggestions -----------------------------------------------
            // ----------------------------------------------------------------

            // http://api.jqueryui.com/autocomplete/#event-select

            $("#Destination").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '@Url.Action("AutoSuggestDestination", "Places")', // Call the Places controller
                        type: "GET", // HTTP GET
                        dataType: "json",
                        data: {
                            text: request.term
                        },
                        success: function (data) {

                            response($.map(data, function (item) {
                                return {
                                    label: item.suggestion,
                                    value: item.suggestion
                                };
                            }));
                        },
                        error: function () {

                            return {
                                label: "There was an error getting suggested locations",
                                value: ""
                            };
                        }
                    });
                },
                select: function (event, ui) {

                    console.log("Selected " + ui.item.value);
                    populateNearbyLandmarks(ui.item.value); // The selected destination

                },
                minLength: 3
            });


            // ----------------------------------------------------------------
            // Dates ----------------------------------------------------------
            // ----------------------------------------------------------------

            $("input#CheckinDate").datepicker({
                changeMonth: true,
                changeYear: true,
                constrainInput: true,
                numberOfMonths: 1,
                minDate: 0,
                dateFormat: 'dd/mm/yy',
                onClose: function (selectedDate) {
                    $("input#CheckoutDate").datepicker("option", "minDate", selectedDate);
                    
                    // Check-out must be within 30 days, for a reservation
                    $("input#CheckoutDate").datepicker("option", "maxDate", new Date(selectedDate).addDays(30));
                }
            });

            $("input#CheckoutDate").datepicker({
                changeMonth: true,
                changeYear: true,
                constrainInput: true,
                numberOfMonths: 1,
                minDate: 0,
                dateFormat: 'dd/mm/yy',
                onClose: function (selectedDate) {
                    $("input#CheckinDate").datepicker("option", "maxDate", selectedDate);
                }
            });

            $("input#CheckinDate").datepicker("setDate", +1);
            $("input#CheckoutDate").datepicker("setDate", +7);


            // ----------------------------------------------------------------
            // Ratings --------------------------------------------------------
            // ----------------------------------------------------------------

            $('div#starMinimum').rateit({
                min: 0,
                max: 5,
                backingfld: '#MinimumStarRating',
                resetable: false,
                ispreset: true,
            });

            $('div#starMaximum').rateit({
                min: 0,
                max: 5,
                backingfld: '#MaximumStarRating',
                resetable: false,
                ispreset: true,
            });

            var tooltipvalues = ['Economy', 'Moderate', 'First Class', 'Superior', 'Deluxe'];

            $(".star").bind('over', function (event, value) {
                $(this).attr('title', tooltipvalues[value - 1]);
            });

            // Make sure minimum and maximum ratings make logical sense

            $("div#starMinimum").bind('rated', function (event, value) {

                
                var min = $('div#starMinimum').rateit('value');
                var max = $('div#starMaximum').rateit('value');

                if (min > max) {
                    $('div#starMaximum').rateit('value', min);
                }
                
            });

            $("div#starMaximum").bind('rated', function (event, value) {

                var min = $('div#starMinimum').rateit('value');
                var max = $('div#starMaximum').rateit('value');

                if (max < min) {
                    $('div#starMaximum').rateit('value', min);
                }

            });

            $('input#MinimumStarRating').hide();
            $('input#MaximumStarRating').hide();

            $("div#starMaximum").rateit('value', 5);
            $("div#starMinimum").rateit('value', 1);

            // ----------------------------------------------------------------
            // Reset Multi Select List Options --------------------------------
            // ----------------------------------------------------------------

            $('a.btn-info').click(function () {
                $(this).parent('div.controls').find('select option:selected').removeAttr('selected');
            });

            // ----------------------------------------------------------------
            // Room -----------------------------------------------------------
            // ----------------------------------------------------------------

            $('ol.rooms > :not(li:first)').hide(); // hide all rooms except first

            function roomSort() {

                var idx = $('select#NumberOfBedrooms').val();

                $('ol.rooms > li:gt(' + (idx - 1) + ')').each(function () {
                    $(this).slideUp('slow');
                });

                // Less than the number of rooms wanted, show
                $('ol.rooms > li:lt(' + (idx) + ')').each(function () {
                    $(this).slideDown('slow');
                });

            }

            $('select#NumberOfBedrooms').change(function () {

                var value = $(this).val();

                $('ol.rooms > li:gt(' + (value - 1) + ')').each(function () {
                    $(this).slideUp('slow');
                });

                $('ol.rooms > li:lt(' + (value) + ')').each(function () {
                    $(this).slideDown('slow');
                });

            });

            roomSort();

            // ----------------------------------------------------------------
            // Children -------------------------------------------------------
            // ----------------------------------------------------------------

            $('div.input-prepend.age').hide(); // Hide all child ages initially

            // Any select list for children amount that changes
            $('select[name$=".Children"]').change(function () {

                var select = $(this);
                var children = $(this).val();

                console.log("Children Selected: " + children);

                var ageSelects = $(select.closest('.room').find('.age select'));

                $(select.closest('.room').find('.age select')).each(function () {
                    $(this).parent('div.age').hide(); // hard hide reset
                });

                for (var i = 0; i < children; i++) {

                    $(ageSelects[i]).parent('div.age').show();
                }

            });

            function sortChildRooms() {

                $('select[name$=".Children"]').each(function () {

                    var select = $(this);
                    var children = $(this).val();

                    console.log("Children Selected: " + children);

                    var ageSelects = $(select.closest('.room').find('.age select'));

                    $(select.closest('.room').find('.age select')).each(function () {
                        $(this).parent('div.age').hide(); // hard hide reset
                    });

                    for (var i = 0; i < children; i++) {

                        $(ageSelects[i]).parent('div.age').show();
                    }

                });

            }

            sortChildRooms();

            
            // ----------------------------------------------------------------
            // Amenities ------------------------------------------------------
            // ----------------------------------------------------------------

            $('a[href="#amenities"]').tooltip({
                placement: 'right',
                animation: true,
                html: false,
                selector: false,
                title: 'Select upto 3 amenities',
            });

            $('input[name="Amenities"]:checkbox').click(function () {

                console.log("Checkbox event fired");

                if ($('input[name="Amenities"]:checked').length === 3) {
                    $('input[name="Amenities"]:not(:checked)').attr("disabled", true);
                } else {
                    $('input[name="Amenities"]').removeAttr("disabled");
                }
            });
            
            // Keep the checkbox button list open
            $('.dropdown-menu input, .dropdown-menu label').click(function (e) {
                e.stopPropagation();
            });


            // ----------------------------------------------------------------
            // Lankmark Proximity ---------------------------------------------
            // ----------------------------------------------------------------

            if ($('select#destinationId option').length > 0) {
                
                // I assume we do nothing
                console.log("Options were already populated, form must of refreshed");

            } else {
                $('select#destinationId').append($("<option></option>").attr("value", "").text("Enter a destination for landmarks"));
            }

            function populateNearbyLandmarks(destination) {

                $.ajax({
                    url: '@Url.Action("Landmarks", "Search")',
                    type: "GET", // HTTP GET
                    dataType: "json",
                    data: {
                        destinationString: destination
                    },
                    success: function (data) {

                        if ($('select#destinationId option').length > 0) {
                            $('select#destinationId option').remove(); // Remove pre-existing options
                        }
                        
                        if (data.length > 0) {

                            $.each(data, function (index, landmark) {
                                console.log(landmark.description + "[" + landmark.destinationId + "]");
                                var option = "<option value='" + landmark.destinationId + "'>" + landmark.description + "</option>";
                                $('select#destinationId').append(option);
                            });

                            $('select#destinationId').prepend("<option value='' selected='selected'>Near a landmark?</option>");
                            $('select#destinationId').scrollTop(10);

                        } else {
                            $('select#destinationId').append($("<option></option>").attr("value", "").text("No landmarks available"));
                        }
                            
                        $('select#destinationId').effect("highlight", {
                            color: '#3a87ad' // Bootstrap Info 
                        }, 1000);

                    },
                    error: function (e) {
                        
                        console.log("Error populating landmarks from response: " + e);
                        
                        if ($('select#destinationId option').length > 0) {

                            $('select#destinationId option').remove(); // Remove pre-existing options
                            $('select#destinationId').append($("<option></option>").attr("value", "").text("No landmarks available"));
                        }
                    }
                });
            }

        });

    </script>

}
